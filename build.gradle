buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id "java"
    id "org.springframework.boot" version "2.7.9"
    id "io.spring.dependency-management" version "1.0.15.RELEASE"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = "xyz.spoonmap"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "17"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    snippetsDir = file("build/generated-snippets")
}

repositories {
    mavenCentral()
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into "BOOT-INF/classes/static/docs"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0"
    implementation "io.jsonwebtoken:jjwt-api:0.11.2"
    implementation "io.jsonwebtoken:jjwt-jackson:0.11.2"
    implementation "org.springdoc:springdoc-openapi-ui:1.6.14"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.440'
    implementation "at.favre.lib:bcrypt:0.10.2"
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    compileOnly "org.projectlombok:lombok"
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.2"
    runtimeOnly "com.mysql:mysql-connector-j"
    annotationProcessor "org.projectlombok:lombok"

    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
}

// querydsl 사용할 경로 지정합니다. 현재 지정한 부분은 .gitignore에 포함되므로 git에 올라가지 않습니다.
def querydslDir = "$buildDir/generated/'querydsl'"

// JPA 사용여부 및 사용 경로 설정
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

// build시 사용할 sourceSet 추가 설정
sourceSets {
    main.java.srcDir querydslDir
}


// querydsl 컴파일 시 사용할 옵션 설정
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

// querydsl이 compileClassPath를 상속하도록 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

asciidoctor.doFirst {
    delete file("src/main/resources/static/docs")
}

tasks.register("copyDocument", Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

tasks.named("test") {
    useJUnitPlatform()
}
